fragment ConstructFields on construct {
  id
  name
  sequence
  sequence_length
}

fragment ConstructPartFields on construct_part {
  construct_id
  id
  index
  orientation
  part_id
}

query Construct($id: uuid!) {
  construct(where: { id: { _eq: $id } }) {
    ...ConstructFields
    folder {
      id
    }
    parts(order_by: { index: asc }) {
      ...ConstructPartFields
      construct {
        ...ConstructFields
      }
      part {
        ...PartFields
      }
    }
    annotations {
      start
      end
      label
    }
  }
}

query ConstructTemplates {
  template: construct(where: { is_template: { _eq: true } }) {
    id
    name
    parts(order_by: { index: asc }) {
      ...ConstructPartFields
      part {
        ...PartFields
      }
    }
  }
}

mutation CreateConstruct($input: construct_insert_input!) {
  insert_construct_one(object: $input) {
    ...ConstructFields
  }
}

mutation UpdateConstruct($id: uuid!, $input: construct_set_input!) {
  update_construct_by_pk(pk_columns: { id: $id }, _set: $input) {
    ...ConstructFields
  }
}

mutation InsertConstructPart(
  $construct_id: uuid!
  $input: [construct_part_insert_input!]!
) {
  delete_construct_part(where: { construct_id: { _eq: $construct_id } }) {
    affected_rows
  }

  insert_construct_part(
    objects: $input
    on_conflict: {
      constraint: construct_part_pkey
      update_columns: [index, orientation, part_id]
    }
  ) {
    returning {
      ...ConstructPartFields
      part {
        ...PartFields
      }
    }
  }
}

mutation InsertAnnotation(
  $construct_id: uuid!
  $input: [annotation_insert_input!]!
) {
  delete_annotation(where: { construct_id: { _eq: $construct_id } }) {
    affected_rows
  }

  insert_annotation(
    objects: $input
    on_conflict: {
      constraint: annotation_pkey
      update_columns: [start, end, label]
    }
  ) {
    returning {
      construct_id
      label
      id
      start
      end
    }
  }
}
