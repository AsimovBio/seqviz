diff --git a/merge-runtime.js b/merge-runtime.js
index 8ef35f0ef063e1ece2e991f8e9ed82fb2c860b0e..4ddd452ec01ef4a29cb1689aec2bc1bbf6eef08d 100644
--- a/merge-runtime.js
+++ b/merge-runtime.js
@@ -1,5 +1,6 @@
 
 const ConcatSource = require('webpack-sources/lib/ConcatSource');
+const Compilation = require("webpack/lib/Compilation");
 
 const PLUGIN_NAME = "ModuleFedSingleRuntimePlugin";
 
@@ -13,21 +14,37 @@ class ModuleFedSingleRuntimePlugin {
    * @param {string} [options.runtime= runtime.js] The runtime to merge
    */
   constructor(options) {
-    this._options = {fileName: 'remoteEntry.js', runtime: 'runtime.js', ...options};
+    this._options = {filename: 'static/runtime/remoteEntry.js', runtime: 'static/chunks/webpack.js', ...options};
   }
   // Define `apply` as its prototype method which is supplied with compiler as its argument
   apply(compiler) {
     if (!this._options) return null;
     const options = this._options;
 
-    // Specify the event hook to attach to
-    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation) => {
-      const { assets } = compilation;
-      const runtime  = assets[this._options.runtime];
-      const remoteEntry = assets[this._options.fileName];
-      const mergedSource = new ConcatSource(runtime, remoteEntry);
-      assets[this._options.fileName] = mergedSource;
-    });
+    compiler.hooks.thisCompilation.tap(
+      "EnableSingleRunTimeForFederationPlugin",
+      (compilation) => {
+        compilation.hooks.processAssets.tap(
+          {
+            name: "EnableSingleRunTimeForFederationPlugin",
+            stage: Compilation.PROCESS_ASSETS_STAGE_DERIVED,
+          },
+          (assets) => {
+            Object.keys(assets).forEach((asset) => {
+              if (asset.startsWith("static/chunks/webpack") || asset.startsWith("webpack-runtime")) {
+                compilation.updateAsset(
+                  options.filename,
+                  new ConcatSource(
+                    compilation.getAsset(asset).source.buffer().toString(),
+                    compilation.getAsset(options.filename).source.buffer().toString()
+                  )
+                );
+              }
+            });
+          }
+        );
+      }
+    );
   }
 };
 
